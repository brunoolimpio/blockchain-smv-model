MODULE P2PNetwork()

	VAR
		IPSent: boolean;
		IPReceived: boolean;
		connectSeed: boolean;
		versionSent: boolean;
		verack: boolean;
	
	ASSIGN
		init(IPSent) := FALSE;
		init(IPReceived) := FALSE;
		init(connectSeed) := FALSE;
		init(versionSent) := FALSE;
		init(verack) := FALSE;



		next(IPSent) := {TRUE, FALSE};
		next(IPReceived) := IPSent = TRUE ? {TRUE, FALSE} : FALSE;
		next(connectSeed) := (IPSent = TRUE & IPReceived = TRUE) ? TRUE : FALSE;
		next(versionSent) := connectSeed = TRUE ? {TRUE, FALSE} : FALSE;
		next(verack) := versionSent = TRUE ? {TRUE, FALSE} : FALSE;


MODULE user(initBalance)
	VAR
		balance : integer;

	ASSIGN
		init(balance) := initBalance;


MODULE createTransaction(id, from, to, amount) --id must be a prime number
	VAR
		transaction : array 1..10 of array 1..2 of integer; --Array of [ID, used?]
		used : {0,1}; -- Defined as a set instead of boolean in order to use as "transaction" array assignment.

	DEFINE		
		fromHasBalance :=  from.balance >= amount; --- Does the sender user have enough balance?
	
	ASSIGN	
		init(used) := 0;
		next(from.balance) := fromHasBalance ? from.balance - amount : from.balance;
		next(to.balance) := fromHasBalance ? to.balance + amount : to.balance;
		next(transaction[id][1]) := id;
		next(transaction[id][2]) := used;
		next(used) := fromHasBalance ? 1 : 0; 

-- !! Pesquisar Registro para alterar estado do "used".

MODULE CreateBlock(hashPrevBlock, transactions)
-- Steps do create a block ---
-- !! Check block messages in https://en.bitcoin.it/wiki/Protocol_rules#.22block.22_messages
-- 1) Block structure (Magic nº, Blocksize, Blockheader, TransactionCounter, Transactions) 
-- 2) Block Header (Version, hashPrevBlock, hashMerkleRoot, Time, Bits, Nonce)
-- 3) Transactions(list containing hashes all transactions inside the block)
	VAR
		
		hashMerkleRoot: integer;
		txnListNotEmpty: boolean;
		blockHash: word[32];
		blockHashSatisfyNonce: boolean;
		expired: boolean;
		transactionsList: array 1..10 of integer;

	DEFINE
		hashMerkleRoot := toint(transactions[1]) * toint(transactions[2]) * toint(transactions[3]);
		-- Quantificar o tamanho de transactions com nºs primos.
		txnListNotEmpty := transactions[1] != 0 ? TRUE : FALSE;
		blockHashSatisfyNonce := [TRUE, FALSE];
		transactionsList := transactions;
		--blockHash := hashPrevBlock 	+ uwconst(hashMerkleRoot);  --Corrigir conversão para inteiro.
	ASSIGN
		




MODULE main
	VAR
		no1 : P2PNetwork();
		no2 : P2PNetwork();
		no3 : P2PNetwork();
		no4 : P2PNetwork();
		no5 : P2PNetwork();
		no6 : P2PNetwork();
		user1 : user(0);
		user2 : user(10);
		user3 : user(6);
		user4 : user(35);
		tx1 : createTransaction(2, user1, user3, 10);
		tx2 : createTransaction(3, user4, user2, 19);
		--tx3 : createTransaction(3, user3, user4, 11);
		--tx4 : createTransaction(4, user2, user1, 6);
		--tx5 : createTransaction(5, user4, user3, 12);


